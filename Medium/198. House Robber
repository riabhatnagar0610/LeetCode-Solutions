# Memoization
class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return solve(nums, 0, dp);
    }
    public int solve(int nums[], int i, int dp[]){
        if(i>=nums.length) return 0;
        if(dp[i] != -1) return dp[i];
        int pick = nums[i] + solve(nums, i+2, dp);
        int notpick = solve(nums, i+1, dp);
        return dp[i] = Math.max(pick, notpick);
    }
}

# Tabulation
class Solution {
    public int rob(int[] nums) {
        return solve(nums);
    }
    public int solve(int nums[]){
        int[] dp = new int[nums.length+2];
        for(int j = nums.length-1; j >= 0; j--){
            int pick = nums[j] + dp[j+2];
            int notpick = dp[j+1];
            dp[j] = Math.max(pick, notpick);
        }
        return dp[0];
    }
}

# Space Optimization
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int prev = nums[0];
        int prev2 = 0;
        for(int i = 1; i < n; i++){
            int pick = nums[i];
            if(i>1){
                pick += prev2;
            }
            int notpick = prev;
            int curr = Math.max(pick, notpick);
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }
}
