#Solution 1 

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<nums.length; i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i], 1);
            }
            else{
                map.put(nums[i], map.get(nums[i])+1);
            }
        }
        int[] keyArr = new int[map.size()];
        int[] valueArr = new int[map.size()];
        int index = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            int key = entry.getKey();
            int value = entry.getValue();
            keyArr[index] = key;
            valueArr[index] = value;
            index++;
        }
        for(int i = 0; i < keyArr.length; i++){
            for(int j = i + 1; j < keyArr.length; j++){
                if(valueArr[i]>valueArr[j]){
                    int tempKey = keyArr[i];
                    keyArr[i] = keyArr[j];
                    keyArr[j] = tempKey;

                    int tempVal = valueArr[i];
                    valueArr[i] = valueArr[j];
                    valueArr[j] = tempVal;
                }
            }
        }
        int[] ans = new int[k];
        int idx = keyArr.length - 1;
        for(int i = 0; i<k; i++){
            ans[i] = keyArr[idx];
            idx--;
        }
        return ans;
    }
}

#Solution 2

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<nums.length; i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i], 1);
            }
            else{
                map.put(nums[i], map.get(nums[i])+1);
            }
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->map.get(b) - map.get(a));
        pq.addAll(map.keySet());
        int[] ans = new int[k];
        for(int i = 0; i<k; i++){
            ans[i] = pq.poll();
        }
        return ans;
    }
}
