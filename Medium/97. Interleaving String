class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int m = s1.length();
        int n = s2.length();
        int t = s3.length();
        if(m+n != t) return false;
        char[] c1 = s1.toCharArray();
        char[] c2 = s2.toCharArray();
        char[] c3 = s3.toCharArray();
        boolean[][] dp = new boolean[m+1][n+1];
        return solve(c1,c2,c3,0,0,0, dp);
    }
    private boolean solve(char[] c1, char[] c2, char[] c3, int i, int j, int k, boolean[][] dp){
        if(dp[i][j]) return false;
        if(k == c3.length) return true;
        boolean possible = (i < c1.length && c1[i] == c3[k] && solve(c1, c2, c3, i+1, j, k+1, dp)) ||
                           (j < c2.length && c2[j] == c3[k] && solve(c1, c2, c3, i, j+1, k+1, dp));
        if(!possible) dp[i][j] = true;
        return possible;
    }
}
