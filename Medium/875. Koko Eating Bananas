class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = Integer.MIN_VALUE;
        for(int i = 0; i < piles.length; i++){
            high = Math.max(high, piles[i]);
        }
        
        while(low<=high){
            int mid = low + (high-low)/2;
            if(isPossible(piles, mid, h)){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return low;
    }

    private boolean isPossible(int[] piles, int k, int h){
        int total = 0;
        for(int i = 0; i < piles.length; i++){
            total += Math.ceil((double) piles[i] / k);
        }
        return total<=h;
    }
}
