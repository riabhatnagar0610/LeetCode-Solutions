class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(ans, list, nums, used);
        return ans;
    }
    public void backtrack(List<List<Integer>> ans, List<Integer> list, int[] nums, boolean[] used){
        if(list.size()==nums.length){
            ans.add(new ArrayList<>(list));
        }
        else{
            for(int i = 0; i < nums.length; i++){
                if(used[i] || (i>0 && nums[i]==nums[i-1] && !used[i-1])) continue;
                list.add(nums[i]);
                used[i] = true;
                backtrack(ans, list, nums, used);
                used[i] = false;
                list.remove(list.size()-1);
            }
        }
    }
}
