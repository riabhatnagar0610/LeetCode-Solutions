class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(ans, new ArrayList<>(), candidates, target, 0);
        return ans;
    }
    private void backtrack( List<List<Integer>> ans, List<Integer> list, int[] candidates, int target, int start){
        if(target < 0) return;
        else if(target==0) ans.add(new ArrayList<>(list));
        else{
            for(int i = start; i < candidates.length; i++){
                list.add(candidates[i]);
                backtrack(ans, list, candidates, target-candidates[i], i);
                list.remove(list.size()-1);
            }
        }
    }
}
