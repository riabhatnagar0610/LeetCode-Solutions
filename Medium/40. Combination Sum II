class Solution {
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(ans, new ArrayList<>(), nums, target, 0);
        return ans;
    }
    private void backtrack(List<List<Integer>> ans, List<Integer> list, int[] nums, int target, int start){
        if(target < 0) return;
        else if(target==0){
            ans.add(new ArrayList<>(list));
        }
        else{
            for(int i = start; i < nums.length; i++){
                if(i > start && nums[i]==nums[i-1]) continue;
                list.add(nums[i]);
                backtrack(ans, list, nums, target-nums[i], i+1);
                list.remove(list.size()-1);
            }
        }
    }
}
