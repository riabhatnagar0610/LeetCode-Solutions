Method 1 : 

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length + nums2.length];
        int i = 0;
        int j = 0;
        int k = 0;
        while(i<=nums1.length && j<=nums2.length){
            if(i==nums1.length){
                while(j<nums2.length){
                    ans[k++] = nums2[j++];
                }
                break;
            }
            else if(j==nums2.length){
                while(i<nums1.length){
                    ans[k++] = nums1[i++];
                }
                break;
            }
            if(nums1[i]<nums2[j]){
                ans[k++] = nums1[i++];
            }
            else{
                ans[k++] = nums2[j++];
            }
        }
        if(ans.length % 2 == 0){
            return (float) (ans[ans.length/2] + ans[ans.length/2 - 1]) / 2;
        }
        else return (float) ans[ans.length/2];
    }
}

Method 2 : 

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length + nums2.length];
        for(int i = 0; i<nums1.length; i++){
            ans[i] = nums1[i];
        }
        int index = 0;
        for(int i = nums1.length; i<nums1.length+nums2.length; i++){
            ans[i] = nums2[index];
            index++;
        }
        Arrays.sort(ans);
        double result;
        if(ans.length % 2 == 0){
            return (float) (ans[ans.length/2] + ans[ans.length/2 - 1]) / 2;
        }
        else return (float) ans[ans.length/2];
    }
}
