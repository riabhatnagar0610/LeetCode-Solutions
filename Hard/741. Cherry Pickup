class Solution {
    Integer[][][][] dp;
    public int cherryPickup(int[][] grid) {
        this.dp = new Integer[grid.length][grid.length][grid.length][grid.length];
        return Math.max(0, solve(grid,0,0,0,0));
    }
    public int solve(int[][] grid, int r1, int c1, int r2, int c2){
        if (grid.length == r1 || grid.length == c1 || grid.length == r2 || grid.length == c2) {
		    return Integer.MIN_VALUE;
	    }
        if(this.dp[r1][c1][r2][c2] != null) return this.dp[r1][c1][r2][c2];
        if(grid[r1][c1] == -1 || grid[r2][c2] == -1) {
		    return Integer.MIN_VALUE;
	    }
        if (r1 == grid.length - 1 && c1 == grid.length - 1) {
            return grid[r1][c1];
        }
        int rr = solve(grid, r1, c1+1, r2, c2+1);
	    int rd = solve(grid, r1, c1+1, r2+1, c2);
	    int dr = solve(grid, r1+1, c1, r2, c2+1); 
	    int dd = solve(grid, r1+1, c1, r2+1, c2);
        int pick2 = grid[r1][c1] + ((r1 != r2 && c1 != c2) ? grid[r2][c2] : 0);
        return this.dp[r1][c1][r2][c2] = pick2 + Math.max(Math.max(rr, rd), Math.max(dr, dd));
    }
    
}
