class Solution {
    public void solveSudoku(char[][] board) {
        solve(board, 0, 0);
    }
    private boolean solve(char[][] board, int row, int col){
        // Base case: If row is equal to board length, entire board has been filled
        if(row==board.length) return true;
        // Move to next row when current row is fully filled
        if(col == board[0].length) return solve(board, row+1, 0);
        if(board[row][col] != '.'){
            return solve(board, row, col+1);
        }
        for(char num = '1'; num <= '9'; num++){
            if(valid(board, row, col, num)){
                board[row][col] = num;
                if(solve(board, row, col+1)) return true;
                board[row][col] = '.';
            }
        }
        return false;
    }
    private boolean valid(char[][] board, int row, int col, char num){
        for(int i = 0; i < board.length; i++){
            if(board[i][col]==num) return false; //check row
            if(board[row][i]==num) return false; //check col
            int subrow = 3 * (row/3) + i/3;
            int subcol = 3 * (col/3) + i%3;
            if(board[subrow][subcol]==num) return false;
        }
        return true;
    }
}
